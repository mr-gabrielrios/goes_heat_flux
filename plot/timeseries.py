'''
Package:            GOES-16 Sensible Heat Flux Numerical Model
Script name:        Timeseries Plotter
Package file path:  ~/plot/timeseries.py
Objective:          Plot time-dependent data for a given point over a period of time.
Author:             Gabriel Rios
'''

##############################################################################################
# BEGIN IMPORTS
##############################################################################################

import datetime, numpy as np, matplotlib, matplotlib.pyplot as plt

##############################################################################################
# END IMPORTS
##############################################################################################

##############################################################################################
# Method name:      formatting
# Method objective: Define formatting for data generated by time_plot
# Input(s):         N/A
# Outputs(s):       style [list]
##############################################################################################

def formatting(fig, ax):
    fig.autofmt_xdate() # Format xtick datetimes (temporary)

##############################################################################################
# Method name:      time_plot
# Method objective: Define data to be plotted along with corresponding formatting.
# Input(s):         data_range [list], data [2D list], utc_offset [timedelta]
# Outputs(s):       plot or .png file
##############################################################################################

def time_plot(date_range, data, var):
    
    matplotlib.rcParams['font.family'] = 'FreeSans'
    matplotlib.rcParams['mathtext.fontset'] = 'custom'
    matplotlib.rcParams['mathtext.rm'] = 'FreeSans'
    matplotlib.rcParams['mathtext.it'] = 'FreeSans'

    font_size = {'title': 13,
                 'subtitle': 10,
                 'plot_ticks': 10,
                 'axes_label': 10}    

    # Initialize figure with number of axes corresponding to number of datasets in data    
    rows, cols = [len(data), 1]
    fig, axs = plt.subplots(nrows=rows, ncols=cols, sharex=True, dpi=300)
        
    # Create vertical gridlines that span across rows to demarcate times
    for i, ax in enumerate(fig.axes):
        ax.grid(axis='x', linestyle=':', which='both')
        # Limit the x-axis to the span of the given date range
        ax.set_xlim([date_range[0], date_range[-1]])
        # Print the variable name (no subscript, assuming single character variable name) and units
        ax.set_ylabel('${0}$ [${1}$]'.format(var[i]['name'][0], var[i]['units']))
        # If data has multiple elements, plot on the same subplot
        for series in data[i]:
            ax.plot(date_range, series)
            subtitle_str = '{0} (${1}$)'.format(var[i]['full_name'], var[i]['units'])
            ax.set_title(subtitle_str, fontsize=font_size['subtitle'], x=0, ha='left')   
            
        formatting(fig, ax)
    
    # Figure title formatting
    title_str = 'Valid: {0} to {1} UTC'.format(date_range[0], date_range[-1])
    # Note: value used for x-position positions the figure title relative to the subplot
    fig_title = fig.suptitle(title_str, 
                             fontsize=font_size['title'], 
                             x=ax.get_position().extents[0],
                             y=1,
                             horizontalalignment='left')
    
    # Subtitle formatting
    ax_title = ax.set_title(subtitle_str, 
                            fontsize=font_size['subtitle'],
                            x=0,
                            y=0.99,
                            ha='left')   
    
    fig.subplots_adjust(hspace=0.5)